module FFT_pipelined (
    input clk_i
    , input rst_i

    , input [31:0] num_bi [5:0]

    , output logic [31:0] x_i [3:0]
);

//// stage 0 ////
// intermediate signals declaration
logic [31:0] inputs0_next [5:0];
logic [31:0] results0 [5:0];
// combinational logic
always @*
    begin
    results0 [0] = num_bi[0] * num_bi[1];
    results0 [1] = num_bi[2] * num_bi[3];
    results0 [2] = num_bi[0] * num_bi[3];
    results0 [3] = num_bi[1] * num_bi[2];
    results0 [4] = num_bi[4];
    results0 [5] = num_bi[5];`
    end
// writing to registers
always @(posedge clk_i)
    begin
    if (rst_i)
        begin
        for (integer i=0; i<6; i++) inputs0_next[i] <= 0;
        end
    else
        begin
        for (integer i=0; i<6; i++) inputs0_next[i] <= results0[i];
        end
    end
//// stage 1 ////
// intermediate signals declaration
logic [31:0] inputs1_next [3:0];
logic [31:0] results1 [3:0];
// combinational logic
always @*
    begin
    results1[0] = inputs0_next[0] - inputs0_next[1];
    results1[1] = inputs0_next[2] + inputs0_next[3];
    results1[2] = inputs0_next[4];
    results1[3] = inputs0_next[5];
    end
// writing to registers
always @(posedge clk_i)
    begin
    if (rst_i)
        begin
        for (integer i=0; i<4; i++) inputs1_next[i] <= 0;
        end
    else
        begin
        for (integer i=0; i<4; i++) inputs1_next[i] <= results1[i];
        end
    end
//// stage 2 ////
// intermediate signals declaration
logic [31:0] results2 [3:0];
// combinational logic
always @*
    begin
    results2[0] = inputs1_next[0] + inputs1_next[2];
    results2[1] = inputs1_next[2] - inputs1_next[0];
    results2[2] = inputs1_next[1] + inputs1_next[3];
    results2[3] = inputs1_next[3] - inputs1_next[1];
    end
// writing to registers
always @(posedge clk_i)
    begin
    if (rst_i)
        begin
        for (integer i=0; i<4; i++) x_i[i] <= 0;
        end
    else
        begin
        for (integer i=0; i<4; i++) x_i[i] <= results2[i];
        end
    end
endmodule
